{"version":3,"sources":["scripts/components/linesSentCounter.js","scripts/components/topPanel.js","scripts/constants/index.js","scripts/constants/tetrominoLayouts.js","scripts/tetromino.js","scripts/tetrisController.js","scripts/components/tetrominoCell.js","scripts/components/tetrisGamePanel.js","scripts/components/app-main.js","serviceWorker.js","index.js"],"names":["LinesSentCounter","props","linesCleared","TopPanel","TETROMINO_TYPE","Object","freeze","GHOST","NONE","I","J","L","O","S","T","Z","TETROMINO_ROTATION_STATE","0","1","2","3","FPS","TETROMINO_LAYOUTS","Tetromino","type","offset","rotationState","this","_layouts","TetrisController","allTypes","keys","splice","indexOf","randomType","Math","floor","random","length","board","tetromino","tetrominoPoints","getPoints","offset_y","offset_x","row","col","numRowsEliminated","r","map","slice","filter","cell","fill","moveRowToIndex","rowIndex","toIndex","updatedTetromino","rotate","obstructionDoesExist","point_y","actual_point_x","outOfBounds","cellNotEmpty","point_x","droppedTetromino","dropTetromino","isCollision","canTetrominoDrop","c","push","TetrominoCell","className","TetrisGamePanel","controller","boardToRender","boardRow","ghostTetromino","hardDropTetromino","ghost_offset_y","ghost_offset_x","tetrominoBoard","tetrominoRow","columnIndex","key","React","Component","App","gameLoop","animationId","frameInterval","lastFrameUpdateTime","lastGameUpdateTime","focusRef","createRef","state","gravity","initBoard","handleKeypress","handleKeyPress","gameTick","bind","now","Date","window","requestAnimationFrame","current","focus","cancelAnimationFrame","event","handleRotateTetromino","handleMoveTetrominoLeft","handleMoveTetrominoRight","handleHardDropTetromino","rotateTetromino","setState","moveTetrominoLeft","moveTetrominoRight","stableBoard","stablizeTetromino","updateGameState","frameElapsed","forceUpdate","gameUpdateInterval","gameUpdateElapsed","workingBoard","workingTetromino","workingLinesCleared","handleLineClears","hasBoardOverflowed","spawnTetromino","tabIndex","onKeyDown","e","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6470394.chunk.js","sourcesContent":["import React from 'react';\n\nfunction LinesSentCounter(props) {\n    return (\n        <div>\n            {\"Lines Sent: \" + props.linesCleared}\n        </div>\n    )\n}\n\nexport default LinesSentCounter;\n","import React from 'react';\nimport LinesSentCounter from './linesSentCounter'\n\nfunction TopPanel(props) {\n    return (\n            <div>\n                <LinesSentCounter linesCleared={props.linesCleared}/>\n            </div>\n    );\n}\n\nexport default TopPanel;\n","export const GRID_WIDTH = 10;\nexport const GRID_HEIGHT = 20;\n\nexport const TETROMINO_TYPE = Object.freeze({\n    GHOST:'GHOST',\n    NONE:'NONE',\n    I:'I',\n    J:'J',\n    L:'L',\n    O:'O',\n    S:'S',\n    T:'T',\n    Z:'Z'\n});\n\nexport const TETROMINO_ROTATION_STATE = Object.freeze({\n    0:0,\n    1:1,\n    2:2,\n    3:3,\n});\n\nexport const FPS = 60;\n","const LAYOUT_I = [\n\t[[1,0], [1,1], [1,2], [1,3]],\n\t[[0,2], [1,2], [2,2], [3,2]],\n\t[[2,0], [2,1], [2,2], [2,3]],\n\t[[0,1], [1,1], [2,1], [3,1]],\n];\n\nconst LAYOUT_J = [\n\t[[0,0], [1,0], [1,1], [1,2]],\n\t[[0,1], [0,2], [1,1], [2,1]],\n\t[[1,0], [1,1], [1,2], [2,2]],\n\t[[0,1], [1,1], [2,0], [2,1]],\n];\n\nconst LAYOUT_L = [\n\t[[0,2], [1,0], [1,1], [1,2]],\n\t[[0,1], [1,1], [2,1], [2,2]],\n\t[[1,0], [1,1], [1,2], [2,0]],\n\t[[0,0], [0,1], [1,1], [2,1]],\n];\n\nconst LAYOUT_O = [\n\t[[0,1], [0,2], [1,1], [1,2]],\n\t[[0,1], [0,2], [1,1], [1,2]],\n\t[[0,1], [0,2], [1,1], [1,2]],\n\t[[0,1], [0,2], [1,1], [1,2]],\n];\n\nconst LAYOUT_S = [\n\t[[0,1], [0,2], [1,0], [1,1]],\n\t[[0,1], [1,1], [1,2], [2,2]],\n\t[[1,1], [1,2], [2,0], [2,1]],\n\t[[0,0], [1,0], [1,1], [2,1]],\n];\n\nconst LAYOUT_T = [\n\t[[0,1], [1,0], [1,1], [1,2]],\n\t[[0,1], [1,1], [1,2], [2,1]],\n\t[[1,0], [1,1], [1,2], [2,1]],\n\t[[0,1], [1,0], [1,1], [2,1]],\n];\n\nconst LAYOUT_Z = [\n\t[[0,0], [0,1], [1,1], [1,2]],\n\t[[0,2], [1,1], [1,2], [2,1]],\n\t[[1,0], [1,1], [2,1], [2,2]],\n\t[[0,1], [1,0], [1,1], [2,0]],\n];\n\n export const TETROMINO_LAYOUTS = Object.freeze({\n    I: LAYOUT_I,\n    J: LAYOUT_J,\n    L: LAYOUT_L,\n    O: LAYOUT_O,\n    S: LAYOUT_S,\n    T: LAYOUT_T,\n    Z: LAYOUT_Z,\n});\n","import { TETROMINO_LAYOUTS } from './constants/tetrominoLayouts';\n\n/**\n    Represents a tetromino that has spawned but has not yet stopped falling.\n    The offset of a falling tetromino refers to the top-left corner of a 4x4\n    box with respect to the game board.\n*/\nclass Tetromino {\n    constructor(type, offset, rotationState) {\n        this.type = type;\n        this.offset = offset;\n        this.rotationState = rotationState;\n\n        this._layouts = TETROMINO_LAYOUTS[type];\n    }\n\n    getPoints() {\n        return this._layouts[this.rotationState];\n    }\n\n    rotate() {\n        this.rotationState += 1;\n        this.rotationState = this.rotationState % 4;\n    }\n\n}\n\nexport default Tetromino;\n","import {\n    TETROMINO_TYPE,\n    TETROMINO_ROTATION_STATE,\n    GRID_WIDTH,\n    GRID_HEIGHT\n} from './constants';\nimport Tetromino from './tetromino'\n\nclass TetrisController {\n\n    spawnTetromino() {\n        let allTypes = Object.keys(TETROMINO_TYPE);\n        allTypes.splice(allTypes.indexOf(TETROMINO_TYPE.GHOST), 2);\n\n        let randomType = allTypes[Math.floor(Math.random()*allTypes.length)];\n\n        let spawnedTetromino = new Tetromino(\n            randomType,\n            [0, 3],\n            TETROMINO_ROTATION_STATE[0]);\n\n        return spawnedTetromino;\n    }\n\n    stablizeTetromino(board, tetromino) {\n        let tetrominoPoints = tetromino.getPoints();\n        let [offset_y, offset_x] = tetromino.offset;\n\n        for (let [row,col] of tetrominoPoints) {\n            board[row+offset_y][col+offset_x] = tetromino.type;\n        }\n\n        return board;\n    }\n\n    handleLineClears(board) {\n        board = board.map(row => row.slice());\n\n        let numRowsEliminated = 0;\n        for (let r = board.length-1; r >= 0; r--) {\n            let row = board[r];\n\n            if (row.filter(cell => cell !== TETROMINO_TYPE.NONE).length === GRID_WIDTH) {\n                row.fill(TETROMINO_TYPE.NONE);\n                numRowsEliminated++;\n            } else {\n                board = this.moveRowToIndex(board, r, r+numRowsEliminated);\n            }\n        }\n\n        return [board, numRowsEliminated];\n    }\n\n    moveRowToIndex(board, rowIndex, toIndex) {\n        board[toIndex] = board[rowIndex];\n\n        return board;\n    }\n\n    hasBoardOverflowed(board) {\n        return false;\n    }\n\n    rotateTetromino(board, tetromino) {\n        let [offset_y, offset_x] = tetromino.offset;\n\n        let updatedTetromino = new Tetromino(\n            tetromino.type,\n            [offset_y, offset_x],\n            tetromino.rotationState);\n\n        updatedTetromino.rotate();\n\n        return updatedTetromino;\n    }\n\n    moveTetrominoLeft(board, tetromino) {\n        let [offset_y, offset_x] = tetromino.offset;\n\n        let obstructionDoesExist = false;\n        for (let [point_y, point_x] of tetromino.getPoints()) {\n            let actual_point_y = point_y + offset_y;\n            let actual_point_x = point_x + offset_x - 1;\n\n            let outOfBounds = actual_point_x < 0;\n            let cellNotEmpty = board[actual_point_y][actual_point_x] !== TETROMINO_TYPE.NONE;\n            obstructionDoesExist = obstructionDoesExist || outOfBounds || cellNotEmpty;\n        }\n\n        if (!obstructionDoesExist) {\n            let updatedTetromino = new Tetromino(\n                tetromino.type,\n                [offset_y, offset_x-1],\n                tetromino.rotationState);\n\n            return updatedTetromino;\n        } else {\n            return tetromino;\n        }\n    }\n\n    moveTetrominoRight(board, tetromino) {\n        let [offset_y, offset_x] = tetromino.offset;\n\n        let obstructionDoesExist = false;\n        for (let [point_y, point_x] of tetromino.getPoints()) {\n            let actual_point_y = point_y + offset_y;\n            let actual_point_x = point_x + offset_x + 1;\n\n            let outOfBounds = actual_point_x < 0;\n            let cellNotEmpty = board[actual_point_y][actual_point_x] !== TETROMINO_TYPE.NONE;\n            obstructionDoesExist = obstructionDoesExist || outOfBounds || cellNotEmpty;\n        }\n\n        if (!obstructionDoesExist) {\n            let updatedTetromino = new Tetromino(\n                tetromino.type,\n                [offset_y, offset_x+1],\n                tetromino.rotationState);\n\n            return updatedTetromino;\n        } else {\n            return tetromino;\n        }\n    }\n\n    isCollision(board, tetromino) {\n        let [offset_y, offset_x] = tetromino.offset;\n        let tetrominoPoints = tetromino.getPoints();\n\n        for (const [point_y, point_x] of tetrominoPoints) {\n            if (point_y + offset_y >= GRID_HEIGHT) {\n                return true;\n            }\n\n            let boardPoint = board[point_y + offset_y][point_x + offset_x];\n            if (boardPoint !== TETROMINO_TYPE.NONE) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    canTetrominoDrop(board, tetromino) {\n        let droppedTetromino = this.dropTetromino(tetromino);\n        return !this.isCollision(board, droppedTetromino);\n    }\n\n    dropTetromino(tetromino) {\n        let [offset_y, offset_x] = tetromino.offset;\n\n        let updatedTetromino = new Tetromino(\n            tetromino.type,\n            [offset_y+1, offset_x],\n            tetromino.rotationState);\n\n        return updatedTetromino;\n    }\n\n    hardDropTetromino(board, tetromino) {\n        while (this.canTetrominoDrop(board, tetromino)) {\n            tetromino = this.dropTetromino(tetromino);\n        }\n\n        return tetromino;\n    }\n\n    initBoard() {\n        let board = [];\n\n        for (let r = 0; r < GRID_HEIGHT; r++) {\n            let row = [];\n            for (let c = 0; c < GRID_WIDTH; c++) {\n                row.push(TETROMINO_TYPE.NONE);\n            }\n            board.push(row);\n        }\n\n        return board;\n    }\n\n}\n\nexport default TetrisController;\n","import React from 'react';\n\nfunction TetrominoCell(props) {\n    let className = \"tetrominoCell \" + props.type;\n\n    return (\n        <div className={className}/>\n    )\n}\n\nexport default TetrominoCell;\n","import React from 'react';\nimport TetrisController from '../tetrisController';\nimport { TETROMINO_TYPE } from '../constants';\nimport TetrominoCell from './tetrominoCell';\n\nclass TetrisGamePanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.controller = new TetrisController();\n    }\n\n    render() {\n        let boardToRender = this.props.board.map(boardRow => \n            boardRow.slice()\n        );\n\n        let tetromino = this.props.tetromino;\n        if (tetromino) {\n            let [offset_y, offset_x] = tetromino.offset;\n            let tetrominoPoints = tetromino.getPoints();\n\n            const ghostTetromino = this.controller.hardDropTetromino(this.props.board, tetromino);\n            let [ghost_offset_y, ghost_offset_x] = ghostTetromino.offset;\n\n            for (let [row,col] of tetrominoPoints) {\n                boardToRender[row+offset_y][col+offset_x] = tetromino.type;\n                boardToRender[row+ghost_offset_y][col+ghost_offset_x] = TETROMINO_TYPE.GHOST;\n            }\n\n        }\n\n        const tetrominoBoard = boardToRender.map((boardRow, rowIndex) => {\n\n            const tetrominoRow = boardRow.map((tetromino, columnIndex) => {\n                    return <TetrominoCell type={tetromino} key={columnIndex}/>\n            });\n\n            return (\n                <div className=\"tetrominoRow\" key={rowIndex}>\n                    {tetrominoRow}\n                </div>\n            )\n        });\n\n        return (\n            <div className=\"TetrisGamePanel\">\n                {tetrominoBoard}\n            </div>\n        )\n    }\n\n}\n\nexport default TetrisGamePanel;\n","import React from 'react';\nimport TopPanel from './topPanel';\nimport TetrisGamePanel from './tetrisGamePanel';\nimport TetrisController from '../tetrisController';\nimport { FPS, TETROMINO_TYPE } from '../constants';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.gameLoop = {\n            animationId: null,\n            frameInterval: 1000.0/FPS,\n            lastFrameUpdateTime: null,\n            lastGameUpdateTime: null,\n        }\n\n        this.controller = new TetrisController();\n        this.focusRef = React.createRef();\n\n        this.state = {\n            gravity: 1/20,\n            board: this.controller.initBoard(),\n            tetromino:null,\n            linesCleared:0\n        }\n\n        this.handleKeypress = this.handleKeyPress(this);\n        this.gameTick = this.gameTick.bind(this);\n    }\n\n    componentDidMount() {\n        let now = Date.now();\n        this.gameLoop.lastFrameUpdateTime = now;\n        this.gameLoop.lastGameUpdateTime = now;\n        this.gameLoop.animationId = window.requestAnimationFrame(this.gameTick);\n\n        this.focusRef.current.focus();\n    }\n\n    componentWillUnmount() {\n        window.cancelAnimationFrame(this.gameLoop.animationId);\n    }\n\n    handleKeyPress(event) {\n        switch (event.key) {\n            case 'ArrowUp':\n                this.handleRotateTetromino();\n                break;\n            case 'ArrowLeft':\n                this.handleMoveTetrominoLeft();\n                break;\n            case 'ArrowRight':\n                this.handleMoveTetrominoRight();\n                break;\n            case ' ':\n                this.handleHardDropTetromino();\n                break;\n        }\n    }\n\n    handleRotateTetromino() {\n        if (this.state.tetromino) {\n            let updatedTetromino = this.controller.rotateTetromino(\n                this.state.board,\n                this.state.tetromino);\n        \n            this.setState({tetromino: updatedTetromino});\n\n        }\n    }\n\n    handleMoveTetrominoLeft() {\n        if (this.state.tetromino) {\n            let updatedTetromino = this.controller.moveTetrominoLeft(\n                this.state.board,\n                this.state.tetromino);\n        \n            this.setState({tetromino: updatedTetromino});\n\n        }\n    }\n\n    handleMoveTetrominoRight() {\n        if (this.state.tetromino) {\n            let updatedTetromino = this.controller.moveTetrominoRight(\n                this.state.board,\n                this.state.tetromino);\n        \n            this.setState({tetromino: updatedTetromino});\n\n        }\n    }\n\n    handleHardDropTetromino() {\n        if (this.state.tetromino) {\n            let updatedTetromino = this.controller.hardDropTetromino(\n                this.state.board,\n                this.state.tetromino);\n\n            let stableBoard = this.controller.stablizeTetromino(\n                this.state.board, updatedTetromino);\n\n            this.setState({board: stableBoard, tetromino: null}, () => {\n                this.updateGameState(Date.now(), true);\n            });            \n        }\n\n        \n    }\n\n    gameTick() {\n        let now = Date.now();\n        let frameElapsed = now - this.gameLoop.lastFrameUpdateTime;\n\n        if (frameElapsed > this.gameLoop.frameInterval) {\n            this.gameLoop.lastFrameUpdateTime = now - (frameElapsed % this.gameLoop.frameInterval);\n\n            this.updateGameState(now);\n        }\n\n        this.gameLoop.animationId = window.requestAnimationFrame(this.gameTick);\n    }\n\n    updateGameState(now, forceUpdate=false) {\n        let gameUpdateInterval = 1000/FPS/this.state.gravity;\n        let gameUpdateElapsed = now - this.gameLoop.lastGameUpdateTime;\n        \n        if (gameUpdateElapsed > gameUpdateInterval || forceUpdate) {\n            this.gameLoop.lastGameUpdateTime = now;\n\n            let workingBoard = this.state.board.map(row => row.slice());\n            let workingTetromino = this.state.tetromino;\n            let workingLinesCleared = this.state.linesCleared;\n\n            if (workingTetromino) {\n                // an unstable tetromino exists\n                if (this.controller.canTetrominoDrop(workingBoard,workingTetromino)) {\n                    workingTetromino = this.controller.dropTetromino(workingTetromino);\n                } else {\n                    workingBoard = this.controller.stablizeTetromino(\n                        workingBoard,\n                        workingTetromino);\n                    workingTetromino = null;\n                }\n            } else {\n                // Board is stable\n                let [board, linesCleared] = this.controller.handleLineClears(workingBoard);\n                workingBoard = board;\n                workingLinesCleared += linesCleared;\n                if (this.controller.hasBoardOverflowed(workingBoard)) {\n                    // TODO: game over\n                }\n        \n                workingTetromino = this.controller.spawnTetromino();\n            }\n            \n            this.setState({\n                board: workingBoard,\n                tetromino: workingTetromino,\n                linesCleared: workingLinesCleared,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div tabIndex=\"1\"\n                onKeyDown={(e) => this.handleKeyPress(e)}\n                ref={this.focusRef}>\n                    \n                <TopPanel linesCleared={this.state.linesCleared}/>\n                <TetrisGamePanel\n                    board={this.state.board}\n                    tetromino={this.state.tetromino}/>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n\n\n/*\n\n    1. Tetris Container\n    2. Top Panel\n    3. Game Panel\n    4. Game-left-hud panel\n    5. Game-right-hud panel\n    6. Game-tetris panel\n    7. Tetromino Cell\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.css';\nimport App from './scripts/components/app-main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}